println ("HEXADECIMAL CONVERSION");
println ("Enter (1) to convert decimal to hexadecimal");
println ("      (2) to convert hexadecimal to decimal");
print ("Your selection: ");
String userInput = System.console().readLine();

if (userInput.equals("1")) {
	print ("Enter a decimal number: ");
	userInput = System.console().readLine();
	int decimalNumber = Integer.parseInt(userInput);
	// println ("The hexadecimal equivalent is " + decimal2binary(decimalNumber));
}

else {
	print ("Enter a hexadecimal number: ");
	userInput = System.console().readLine();
	println ("The decimal equivalent is " + hexadecimal2decimal(userInput));
}

int power (int base, int exponent) {
	if (exponent == 0) { // anything to the power of zero is 1!
		return 1;
	}
	int result = base;
	for (int i = 1; i < exponent; i++) {
		result = result * base;
	}
return result;
}

int power16 (int exponent) {
	return (power (16, exponent));
}

int hexadecimal2decimal (String hexadecimal) {
	int numberLength = hexadecimal.length();
	int decimalNumber = 0;
	char digit;
	int ascii;
	int hexaDigit;
	for (int i = (numberLength - 1); i != (-1); i--) {
		digit = (hexadecimal.charAt(i));
		ascii = digit;
		if (ascii >= 48 && ascii <= 57) { // digit is a number
			hexaDigit = ascii - 48;
		}
		else { //digit is a letter
			hexaDigit = ascii - 87;
		}
		decimalNumber = decimalNumber + hexaDigit + (1 * (power16 (numberLength - i - 1)));
		
		println (digit);
		println (ascii);
		println (hexaDigit);
		
		
	}
	return decimalNumber;
}

/*

String decimal2hexadecimal (int decimalNumber) {
	String hexaNumber = "";
	
	// We create the hexadecimal number backwards
	
	while (decimalNumber > 0) {
		if ((decimalNumber % 16) != 0) {
			hexaNumber = hexaNumber + "1";
		}
		else {
			hexaNumber = hexaNumber + "0";
		}
		decimalNumber = decimalNumber / 2;
	}

	// Now we reverse the hexaNumber String

	String hexaNumberCorrect = "";

	for (int i = (hexaNumber.length() - 1); i >= 0; i--){
		hexaNumberCorrect = hexaNumberCorrect + hexaNumber.charAt(i);
	}
	return hexaNumberCorrect;
}

*/
